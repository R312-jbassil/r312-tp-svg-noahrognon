---
import Layout from "../layouts/Layout.astro";
import { ui } from "../i18n/ui.js";
const locale =
  Astro.locals.lang === "fr" || Astro.locals.lang === "en"
    ? Astro.locals.lang
    : "en";
const generatorUi = ui[locale].generator;
const apiUi = ui[locale].api;
---

<Layout title={generatorUi.pageTitle} locale={locale}>
  <div class="min-h-screen bg-base-200 flex items-center justify-center p-6">
    <div
      class="w-full max-w-6xl grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
    >
      <div class="card bg-base-100 shadow-md border border-base-300">
        <div class="card-body">
          <h2 class="card-title">{generatorUi.prompt.title}</h2>
          <textarea
            id="user-prompt"
            class="textarea textarea-bordered w-full h-40"
            placeholder={generatorUi.prompt.placeholder}></textarea>
          <div class="flex flex-wrap gap-2 mt-4">
            <button id="generate-button" class="btn btn-primary flex-1">
              {generatorUi.prompt.generate}
            </button>
            <button id="edit-button" class="btn btn-secondary flex-1">
              {generatorUi.prompt.edit}
            </button>
          </div>
        </div>
      </div>

      <div class="card bg-base-100 shadow-md border border-base-300">
        <div class="card-body">
          <h2 class="card-title">{generatorUi.code.title}</h2>
          <pre
            class="mockup-code w-full h-80 overflow-auto">
            <code id="svg-output" class="text-xs" />
          </pre>
          <label class="form-control w-full mt-4">
            <span class="label-text">{generatorUi.code.nameLabel}</span>
            <input
              id="svg-name"
              class="input input-bordered w-full"
              placeholder={generatorUi.code.namePlaceholder}
            />
          </label>
          <button id="save-button" type="button" class="btn btn-secondary mt-2">
            {generatorUi.code.save}
          </button>
          <a class="btn btn-primary" href="/gallery"
            >{generatorUi.code.galleryLink}</a
          >
          <p id="save-status" class="text-sm opacity-70 mt-2"></p>
        </div>
      </div>

      <div class="card bg-base-100 shadow-md border border-base-300">
        <div class="card-body">
          <h2 class="card-title">{generatorUi.preview.title}</h2>
          <div
            id="svg-container"
            class="w-full h-80 flex items-center justify-center bg-base-200 rounded-box overflow-auto"
          >
            <span class="text-base-content/50">{generatorUi.preview.empty}</span
            >
          </div>
        </div>
      </div>
    </div>
  </div>

  <script define:vars={{ generatorText: generatorUi, apiText: apiUi }}>
    //@ts-nocheck

    const promptElement = document.getElementById("user-prompt");
    const svgContainer = document.getElementById("svg-container");
    const svgOutput = document.getElementById("svg-output");
    const generateButton = document.getElementById("generate-button");
    const editButton = document.getElementById("edit-button");
    const svgNameInput = document.getElementById("svg-name");
    const saveButton = document.getElementById("save-button");
    const saveStatus = document.getElementById("save-status");
    const promptList = [];
    let lastGeneratedSvg = "";
    function getStoredUser() {
      try {
        const rawUser = localStorage.getItem("user");
        return rawUser ? JSON.parse(rawUser) : null;
      } catch (error) {
        console.warn("Failed to parse stored user", error);
        return null;
      }
    }
    let currentUser = getStoredUser();

    const messages = generatorText.messages;
    const loadingSpinner =
      '<span class="loading loading-ring loading-xl"></span>';
    const noSvgHtml = `<span class="text-base-content/60">${messages.noSvg}</span>`;
    const promptHintHtml = `<span class="text-base-content/60">${messages.promptHint}</span>`;
    const generationErrorHtml = `<span class="text-error">${messages.generationErrorLabel}</span>`;

    async function generateSVG(messagesPayload) {
      const res = await fetch("/api/generateSVG", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ messages: messagesPayload }),
      });

      if (!res.ok) {
        const errorText = await res.text();
        throw new Error(`${apiText.requestFailed} ${res.status} ${errorText}`);
      }

      const data = await res.json();
      return data.svg;
    }

    function resetUiForRequest() {
      lastGeneratedSvg = "";
      if (saveButton) saveButton.disabled = true;
      if (saveStatus) saveStatus.textContent = "";

      if (svgOutput) {
        svgOutput.textContent = "";
      }
      if (svgContainer) {
        svgContainer.innerHTML = loadingSpinner;
      }
      if (generateButton) {
        generateButton.disabled = true;
      }
      if (editButton) {
        editButton.disabled = true;
      }
    }

    function restoreUiAfterRequest() {
      if (generateButton) {
        generateButton.disabled = false;
      }
      if (editButton) {
        editButton.disabled = !(promptList.length > 0 && lastGeneratedSvg);
      }
      if (saveButton) {
        saveButton.disabled = !lastGeneratedSvg;
      }
    }

    function displaySvg(svgCode) {
      lastGeneratedSvg = svgCode || "";
      if (svgOutput) {
        svgOutput.textContent = lastGeneratedSvg || messages.noSvg;
      }
      if (svgContainer) {
        svgContainer.innerHTML = lastGeneratedSvg || noSvgHtml;
      }
    }

    async function handleSubmit() {
      let prompt = "";
      let aiResponse = { role: "assistant", content: "" };

      if (promptElement) {
        prompt = (promptElement.value || "").trim();
      }

      if (!prompt) {
        if (svgOutput) {
          svgOutput.textContent = messages.promptRequired;
        }
        if (svgContainer) {
          svgContainer.innerHTML = promptHintHtml;
        }
        lastGeneratedSvg = "";
        promptList.length = 0;
        if (saveButton) saveButton.disabled = true;
        if (saveStatus) saveStatus.textContent = "";
        return;
      }

      promptList.length = 0;
      promptList.push({ role: "user", content: prompt });

      resetUiForRequest();

      try {
        aiResponse = await generateSVG(promptList);
        if (!aiResponse || typeof aiResponse !== "object") {
          aiResponse = { role: "assistant", content: "" };
        }

        const svgMatch = aiResponse.content?.match(/<svg[\s\S]*?<\/svg>/i);
        aiResponse.content = svgMatch ? svgMatch[0] : "";

        promptList.push(aiResponse);
        displaySvg(aiResponse.content);
      } catch (error) {
        console.error(error);
        displaySvg("");
        if (svgContainer) {
          svgContainer.innerHTML = generationErrorHtml;
        }
        if (saveStatus) {
          saveStatus.textContent = messages.generationUnavailable;
        }
      } finally {
        restoreUiAfterRequest();
      }
    }

    async function handleEdit() {
      let prompt = "";
      let aiResponse = { role: "assistant", content: "" };

      if (promptElement) {
        prompt = (promptElement.value || "").trim();
      }

      if (!prompt) {
        console.warn(messages.editPromptMissing);
        return;
      }

      promptList.push({ role: "user", content: prompt });

      if (svgContainer) {
        svgContainer.innerHTML += loadingSpinner;
      }
      if (generateButton) {
        generateButton.disabled = true;
      }
      if (editButton) {
        editButton.disabled = true;
      }

      try {
        aiResponse = await generateSVG(promptList);
        if (!aiResponse || typeof aiResponse !== "object") {
          aiResponse = { role: "assistant", content: "" };
        }

        const svgMatch = aiResponse.content?.match(/<svg[\s\S]*?<\/svg>/i);
        aiResponse.content = svgMatch ? svgMatch[0] : "";

        promptList.push(aiResponse);
        displaySvg(aiResponse.content);
      } catch (error) {
        console.error(error);
        if (saveStatus) {
          saveStatus.textContent = messages.editFailed;
        }
      } finally {
        restoreUiAfterRequest();
      }
    }

    async function saveSvg(params) {
      const res = await fetch("/api/saveSVG", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(params),
      });
      if (!res.ok) {
        const errorText = await res.text();
        throw new Error(errorText || messages.saveErrorFallback);
      }
      return res.json();
    }

    async function handleSave() {
      if (!saveButton) return;

      const name = svgNameInput ? (svgNameInput.value || "").trim() : "";
      currentUser = getStoredUser();

      if (!lastGeneratedSvg) {
        if (saveStatus) {
          saveStatus.textContent = messages.saveNeedsSvg;
        }
        return;
      }

      if (!name) {
        if (saveStatus) {
          saveStatus.textContent = messages.saveNeedsName;
        }
        if (svgNameInput) {
          svgNameInput.focus();
        }
        return;
      }
      if (!currentUser?.id) {
        console.warn("Cannot save SVG without an authenticated user.");
        if (saveStatus) {
          saveStatus.textContent = messages.saveErrorFallback;
        }
        return;
      }

      saveButton.disabled = true;
      if (saveStatus) {
        saveStatus.textContent = messages.saving;
      }

      try {
        const chatHistory = JSON.stringify(promptList);
        const response = await saveSvg({
          name,
          code_svg: lastGeneratedSvg,
          chat_history: chatHistory,
          user: currentUser.id,
        });

        if (response?.success) {
          if (saveStatus) {
            saveStatus.textContent = messages.saved;
          }
        } else {
          throw new Error(response?.error || messages.saveErrorFallback);
        }
      } catch (error) {
        console.error(error);
        if (saveStatus) {
          saveStatus.textContent = `${messages.saveErrorPrefix} ${error?.message || messages.saveErrorFallback}`;
        }
      } finally {
        saveButton.disabled = !lastGeneratedSvg;
      }
    }

    generateButton?.addEventListener("click", handleSubmit);
    editButton?.addEventListener("click", handleEdit);
    saveButton?.addEventListener("click", handleSave);
    if (saveButton) {
      saveButton.disabled = true;
    }
    if (editButton) {
      editButton.disabled = true;
    }
  </script>
</Layout>
