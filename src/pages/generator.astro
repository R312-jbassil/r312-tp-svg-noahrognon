---
const title = "Generateur SVG";
import "../styles/global.css";
---

<html lang="fr">
    <head>
        <meta charset="utf-8" />
        <title>{title}</title>
    </head>
    <body class="min-h-screen bg-base-200 flex items-center justify-center p-6">
        <main
            class="w-full max-w-6xl grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
        >
            <!-- DIV 1 : Prompt utilisateur -->
            <div class="card bg-base-100 shadow-md border border-base-300">
                <div class="card-body">
                    <h2 class="card-title">Prompt</h2>
                    <textarea
                        id="user-prompt"
                        class="textarea textarea-bordered w-full h-40"
                        placeholder="Decris l'illustration que tu veux generer..."
                    ></textarea>
                    <div class="flex flex-wrap gap-2 mt-4">
                        <button
                            id="generate-button"
                            class="btn btn-primary flex-1"
                        >
                            Generer
                        </button>
                        <button
                            id="edit-button"
                            class="btn btn-secondary flex-1"
                        >
                            Edit
                        </button>
                    </div>
                </div>
            </div>

            <!-- DIV 2 : Code genere -->
            <div class="card bg-base-100 shadow-md border border-base-300">
                <div class="card-body">
                    <h2 class="card-title">Code SVG</h2>
                    <pre
                        class="mockup-code w-full h-80 overflow-auto">
                        <!-- IMPORTANT : balise non auto-fermee -->
                        <code id="svg-output" class="text-xs" />
                    </pre>
                    <label class="form-control w-full mt-4">
                        <span class="label-text">Nom du SVG</span>
                        <input
                            id="svg-name"
                            class="input input-bordered w-full"
                            placeholder="Mon illustration"
                        />
                    </label>
                    <button
                        id="save-button"
                        type="button"
                        class="btn btn-secondary mt-2"
                    >
                        Enregistrer dans la bibliotheque
                    </button>
                    <a class="btn btn-primary" href="/gallery"
                        >Gallery</a
                    >
                    <p id="save-status" class="text-sm opacity-70 mt-2"></p>
                </div>
            </div>

            <!-- DIV 3 : Apercu SVG -->
            <div class="card bg-base-100 shadow-md border border-base-300">
                <div class="card-body">
                    <h2 class="card-title">Apercu</h2>
                    <div
                        id="svg-container"
                        class="w-full h-80 flex items-center justify-center bg-base-200 rounded-box overflow-auto"
                    >
                        <span class="text-base-content/50">
                            Ton SVG apparaitra ici
                        </span>
                    </div>
                </div>
            </div>
        </main>

        <!-- Script cote client -->
        <script>
            //@ts-nocheck
            const promptElement = document.getElementById("user-prompt");
            const svgContainer = document.getElementById("svg-container");
            const svgOutput = document.getElementById("svg-output");
            const generateButton = document.getElementById("generate-button");
            const editButton = document.getElementById("edit-button");
            const svgNameInput = document.getElementById("svg-name");
            const saveButton = document.getElementById("save-button");
            const saveStatus = document.getElementById("save-status");
            const promptList = [];
            let lastGeneratedSvg = "";
            const loadingSpinner =
                '<span class="loading loading-ring loading-xl"></span>';

            async function generateSVG(messages) {
                console.log("Generating SVG for messages:", messages);
                const res = await fetch("/api/generateSVG", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ messages }),
                });

                if (!res.ok) {
                    const errorText = await res.text();
                    throw new Error(
                        `Request failed: ${res.status} ${errorText}`,
                    );
                }

                const data = await res.json();
                return data.svg;
            }

            function resetUiForRequest() {
                lastGeneratedSvg = "";
                if (saveButton) saveButton.disabled = true;
                if (saveStatus) saveStatus.textContent = "";

                if (svgOutput) {
                    svgOutput.textContent = "";
                }
                if (svgContainer) {
                    svgContainer.innerHTML = loadingSpinner;
                }
                if (generateButton) {
                    generateButton.disabled = true;
                }
                if (editButton) {
                    editButton.disabled = true;
                }
            }

            function restoreUiAfterRequest() {
                if (generateButton) {
                    generateButton.disabled = false;
                }
                if (editButton) {
                    editButton.disabled = !(
                        promptList.length > 0 && lastGeneratedSvg
                    );
                }
                if (saveButton) {
                    saveButton.disabled = !lastGeneratedSvg;
                }
            }

            function displaySvg(svgCode) {
                lastGeneratedSvg = svgCode || "";
                if (svgOutput) {
                    svgOutput.textContent =
                        lastGeneratedSvg || "Aucun SVG recu.";
                }
                if (svgContainer) {
                    svgContainer.innerHTML =
                        lastGeneratedSvg ||
                        '<span class="text-base-content/60">Aucun SVG recu.</span>';
                }
            }

            async function handleSubmit() {
                let prompt = "";
                let aiResponse = { role: "assistant", content: "" };

                if (promptElement) {
                    prompt = (promptElement.value || "").trim();
                }

                if (!prompt) {
                    if (svgOutput) {
                        svgOutput.textContent = "Veuillez entrer un prompt.";
                    }
                    if (svgContainer) {
                        svgContainer.innerHTML =
                            '<span class="text-base-content/60">Aucun prompt fourni.</span>';
                    }
                    lastGeneratedSvg = "";
                    promptList.length = 0;
                    if (saveButton) saveButton.disabled = true;
                    if (saveStatus) saveStatus.textContent = "";
                    return;
                }

                promptList.length = 0;
                promptList.push({ role: "user", content: prompt });

                resetUiForRequest();

                try {
                    aiResponse = await generateSVG(promptList);
                    if (!aiResponse || typeof aiResponse !== "object") {
                        aiResponse = { role: "assistant", content: "" };
                    }

                    const svgMatch =
                        aiResponse.content?.match(/<svg[\s\S]*?<\/svg>/i);
                    aiResponse.content = svgMatch ? svgMatch[0] : "";
                    console.log("svgCode:", aiResponse.content);

                    promptList.push(aiResponse);
                    displaySvg(aiResponse.content);
                } catch (error) {
                    console.error(error);
                    displaySvg("");
                    if (svgOutput) {
                        svgOutput.textContent = "Erreur lors de la generation.";
                    }
                    if (svgContainer) {
                        svgContainer.innerHTML =
                            '<span class="text-error">Erreur de generation</span>';
                    }
                    if (saveStatus) {
                        saveStatus.textContent =
                            "Impossible de generer le SVG.";
                    }
                } finally {
                    restoreUiAfterRequest();
                }
            }

            async function handleEdit() {
                let prompt = "";
                let aiResponse = { role: "assistant", content: "" };

                if (promptElement) {
                    prompt = (promptElement.value || "").trim();
                }

                if (!prompt) {
                    console.warn("Prompt vide pour l'edition");
                    return;
                }

                promptList.push({ role: "user", content: prompt });

                if (svgContainer) {
                    svgContainer.innerHTML += loadingSpinner;
                }
                if (generateButton) {
                    generateButton.disabled = true;
                }
                if (editButton) {
                    editButton.disabled = true;
                }

                try {
                    aiResponse = await generateSVG(promptList);
                    if (!aiResponse || typeof aiResponse !== "object") {
                        aiResponse = { role: "assistant", content: "" };
                    }

                    const svgMatch =
                        aiResponse.content?.match(/<svg[\s\S]*?<\/svg>/i);
                    aiResponse.content = svgMatch ? svgMatch[0] : "";
                    console.log("svgCode:", aiResponse.content);

                    promptList.push(aiResponse);
                    displaySvg(aiResponse.content);
                } catch (error) {
                    console.error(error);
                    if (saveStatus) {
                        saveStatus.textContent = "Impossible d'editer le SVG.";
                    }
                } finally {
                    restoreUiAfterRequest();
                    console.log("Historique des prompts:", promptList);
                }
            }

            async function saveSvg(params) {
                const res = await fetch("/api/saveSVG", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(params),
                });
                return res.json();
            }

            async function handleSave() {
                if (!saveButton) return;

                const name = svgNameInput
                    ? (svgNameInput.value || "").trim()
                    : "";

                if (!lastGeneratedSvg) {
                    if (saveStatus) {
                        saveStatus.textContent =
                            "Generez un SVG avant de l'enregistrer.";
                    }
                    return;
                }

                if (!name) {
                    if (saveStatus) {
                        saveStatus.textContent = "Merci de saisir un nom.";
                    }
                    if (svgNameInput) {
                        svgNameInput.focus();
                    }
                    return;
                }

                saveButton.disabled = true;
                if (saveStatus) {
                    saveStatus.textContent = "Enregistrement...";
                }

                try {
                    const chatHistory = JSON.stringify(promptList);
                    const response = await saveSvg({
                        name,
                        code_svg: lastGeneratedSvg,
                        chat_history: chatHistory,
                    });

                    if (response?.success) {
                        if (saveStatus) {
                            saveStatus.textContent = "SVG enregistre !";
                        }
                    } else {
                        throw new Error(
                            response?.error || "Erreur lors de la sauvegarde",
                        );
                    }
                } catch (error) {
                    console.error(error);
                    if (saveStatus) {
                        saveStatus.textContent =
                            "Erreur : " +
                            (error?.message || "Enregistrement impossible.");
                    }
                } finally {
                    saveButton.disabled = !lastGeneratedSvg;
                }
            }

            generateButton?.addEventListener("click", handleSubmit);
            editButton?.addEventListener("click", handleEdit);
            saveButton?.addEventListener("click", handleSave);
            if (saveButton) {
                saveButton.disabled = true;
            }
            if (editButton) {
                editButton.disabled = true;
            }
        </script>
    </body>
</html>
